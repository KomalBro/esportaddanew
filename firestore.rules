rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      
      // Special rule for balance updates by admin
      allow update: if isAdmin() && 
        request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['balance', 'lastBalanceUpdateBy', 'lastBalanceUpdateAt']);
    }

    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        (request.resource.data.userId == request.auth.uid || isAdmin());
    }

    // Games Collection
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Tournaments Collection
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || 
        (isAuthenticated() && 
          request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['currentPlayers']));
    }
    
    // Withdrawals Collection
    match /withdrawals/{withdrawalId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && 
          resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false;
    }
    
    // Support Tickets Collection
    match /support_tickets/{ticketId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && 
          resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() || 
        (isAuthenticated() && 
          resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Activity Collection
    match /activity/{activityId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && 
          resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // Settings Collection
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Tournament Participants (if you add this collection)
    match /tournament_participants/{participantId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAdmin() || 
        (isAuthenticated() && 
          resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // User Wallet (if you add this collection)
    match /wallets/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAdmin();
      allow delete: if false;
    }
    
    // KYC Documents (if you add this collection)
    match /kyc_documents/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}